/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Action, Expiration, Timestamp, Uint64, QueryMsg, MigrateMsg, CountResponse, OwnershipForString } from "./DappTemplate.types";
import { DappTemplateQueryClient, DappTemplateClient } from "./DappTemplate.client";
export const dappTemplateQueryKeys = {
  contract: ([{
    contract: "dappTemplate"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...dappTemplateQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  getCount: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...dappTemplateQueryKeys.address(contractAddress)[0],
    method: "get_count",
    args
  }] as const),
  ownership: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...dappTemplateQueryKeys.address(contractAddress)[0],
    method: "ownership",
    args
  }] as const)
};
export const dappTemplateQueries = {
  getCount: <TData = CountResponse,>({
    client,
    options
  }: DappTemplateGetCountQuery<TData>): UseQueryOptions<CountResponse, Error, TData> => ({
    queryKey: dappTemplateQueryKeys.getCount(client?.contractAddress),
    queryFn: () => client ? client.getCount() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  ownership: <TData = OwnershipForString,>({
    client,
    options
  }: DappTemplateOwnershipQuery<TData>): UseQueryOptions<OwnershipForString, Error, TData> => ({
    queryKey: dappTemplateQueryKeys.ownership(client?.contractAddress),
    queryFn: () => client ? client.ownership() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface DappTemplateReactQuery<TResponse, TData = TResponse> {
  client: DappTemplateQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface DappTemplateOwnershipQuery<TData> extends DappTemplateReactQuery<OwnershipForString, TData> {}
export function useDappTemplateOwnershipQuery<TData = OwnershipForString>({
  client,
  options
}: DappTemplateOwnershipQuery<TData>) {
  return useQuery<OwnershipForString, Error, TData>(dappTemplateQueryKeys.ownership(client?.contractAddress), () => client ? client.ownership() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DappTemplateGetCountQuery<TData> extends DappTemplateReactQuery<CountResponse, TData> {}
export function useDappTemplateGetCountQuery<TData = CountResponse>({
  client,
  options
}: DappTemplateGetCountQuery<TData>) {
  return useQuery<CountResponse, Error, TData>(dappTemplateQueryKeys.getCount(client?.contractAddress), () => client ? client.getCount() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DappTemplateUpdateOwnershipMutation {
  client: DappTemplateClient;
  msg: Action;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDappTemplateUpdateOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DappTemplateUpdateOwnershipMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DappTemplateUpdateOwnershipMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwnership(msg, fee, memo, funds), options);
}
export interface DappTemplateResetMutation {
  client: DappTemplateClient;
  msg: {
    count: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDappTemplateResetMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DappTemplateResetMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DappTemplateResetMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.reset(msg, fee, memo, funds), options);
}
export interface DappTemplateIncrementMutation {
  client: DappTemplateClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDappTemplateIncrementMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DappTemplateIncrementMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DappTemplateIncrementMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.increment(fee, memo, funds), options);
}