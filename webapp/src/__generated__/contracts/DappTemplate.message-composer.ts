/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, Action, Expiration, Timestamp, Uint64, QueryMsg, MigrateMsg, CountResponse, OwnershipForString } from "./DappTemplate.types";
export interface DappTemplateMsg {
  contractAddress: string;
  sender: string;
  increment: (funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  reset: ({
    count
  }: {
    count: number;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  updateOwnership: (action: Action, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class DappTemplateMsgComposer implements DappTemplateMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.increment = this.increment.bind(this);
    this.reset = this.reset.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }
  increment = (funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          increment: {}
        })),
        funds: funds_
      })
    };
  };
  reset = ({
    count
  }: {
    count: number;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          reset: {
            count
          }
        })),
        funds: funds_
      })
    };
  };
  updateOwnership = (action: Action, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_ownership: action
        })),
        funds: funds_
      })
    };
  };
}